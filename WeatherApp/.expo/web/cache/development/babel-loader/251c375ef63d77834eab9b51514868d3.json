{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/home/kevin/Desktop/Learning-React-Native/WeatherApp/App.js\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport ImageBackground from \"react-native-web/dist/exports/ImageBackground\";\nimport KeyboardAvoidingView from \"react-native-web/dist/exports/KeyboardAvoidingView\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport { fetchLocationId, fetchWeather } from \"./utils/api\";\nimport getImageForWeather from \"./utils/getImageForWeather\";\nimport SearchInput from \"./components/SearchInput\";\n\nvar App = function (_React$Component) {\n  _inherits(App, _React$Component);\n\n  var _super = _createSuper(App);\n\n  function App() {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      loading: false,\n      error: false,\n      location: '',\n      temperature: 0,\n      weather: ''\n    };\n\n    _this.handleUpdateLocation = function _callee2(city) {\n      return _regeneratorRuntime.async(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              if (city) {\n                _context2.next = 2;\n                break;\n              }\n\n              return _context2.abrupt(\"return\");\n\n            case 2:\n              _this.setState({\n                loading: true\n              }, function _callee() {\n                var locationId, _await$fetchWeather, location, weather, temperature;\n\n                return _regeneratorRuntime.async(function _callee$(_context) {\n                  while (1) {\n                    switch (_context.prev = _context.next) {\n                      case 0:\n                        _context.prev = 0;\n                        _context.next = 3;\n                        return _regeneratorRuntime.awrap(fetchLocationId(city));\n\n                      case 3:\n                        locationId = _context.sent;\n                        _context.next = 6;\n                        return _regeneratorRuntime.awrap(fetchWeather(locationId));\n\n                      case 6:\n                        _await$fetchWeather = _context.sent;\n                        location = _await$fetchWeather.location;\n                        weather = _await$fetchWeather.weather;\n                        temperature = _await$fetchWeather.temperature;\n\n                        _this.setState({\n                          loading: false,\n                          error: false,\n                          location: location,\n                          weather: weather,\n                          temperature: temperature\n                        });\n\n                        _context.next = 16;\n                        break;\n\n                      case 13:\n                        _context.prev = 13;\n                        _context.t0 = _context[\"catch\"](0);\n\n                        _this.setState({\n                          loading: false,\n                          error: true\n                        });\n\n                      case 16:\n                      case \"end\":\n                        return _context.stop();\n                    }\n                  }\n                }, null, null, [[0, 13]], Promise);\n              });\n\n            case 3:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.handleUpdateLocation('San Francisco');\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state = this.state,\n          loading = _this$state.loading,\n          error = _this$state.error,\n          location = _this$state.location,\n          weather = _this$state.weather,\n          temperature = _this$state.temperature;\n      return React.createElement(KeyboardAvoidingView, {\n        style: styles.container,\n        behavior: \"margin\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 7\n        }\n      }, React.createElement(StatusBar, {\n        barStyle: \"light-content\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 9\n        }\n      }), React.createElement(ImageBackground, {\n        source: getImageForWeather(weather),\n        style: styles.imageContainer,\n        imageStyle: styles.image,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 9\n        }\n      }, React.createElement(View, {\n        style: styles.detailsContainer,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 11\n        }\n      }, React.createElement(ActivityIndicator, {\n        animating: loading,\n        color: \"white\",\n        size: \"large\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 13\n        }\n      }), !loading && React.createElement(View, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 15\n        }\n      }, error && React.createElement(Text, {\n        style: [styles.smallText, styles.textStyle],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 19\n        }\n      }, \"Could not load weather, please try a different city.\"), !error && React.createElement(View, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 19\n        }\n      }, React.createElement(Text, {\n        style: [styles.largeText, styles.textStyle],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 21\n        }\n      }, location), React.createElement(Text, {\n        style: [styles.smallText, styles.textStyle],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 21\n        }\n      }, weather), React.createElement(Text, {\n        style: [styles.largeText, styles.textStyle],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 21\n        }\n      }, Math.round(temperature) + \"\\xB0\")), React.createElement(SearchInput, {\n        placeholder: \"Search any city\",\n        onSubmit: this.handleUpdateLocation,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 17\n        }\n      })))));\n    }\n  }]);\n\n  return App;\n}(React.Component);\n\nexport { App as default };\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#34495E'\n  },\n  imageContainer: {\n    flex: 1\n  },\n  image: {\n    flex: 1,\n    width: null,\n    height: null,\n    resizeMode: 'cover'\n  },\n  detailsContainer: {\n    flex: 1,\n    justifyContent: 'center',\n    backgroundColor: 'rgba(0,0,0,0.2)',\n    paddingHorizontal: 20\n  },\n  textStyle: {\n    textAlign: 'center',\n    fontFamily: Platform.OS === 'ios' ? 'AvenirNext-Regular' : 'Roboto',\n    color: 'white'\n  },\n  largeText: {\n    fontSize: 44\n  },\n  smallText: {\n    fontSize: 18\n  }\n});","map":{"version":3,"sources":["/home/kevin/Desktop/Learning-React-Native/WeatherApp/App.js"],"names":["React","fetchLocationId","fetchWeather","getImageForWeather","SearchInput","App","state","loading","error","location","temperature","weather","handleUpdateLocation","city","setState","locationId","styles","container","imageContainer","image","detailsContainer","smallText","textStyle","largeText","Math","round","Component","StyleSheet","create","flex","backgroundColor","width","height","resizeMode","justifyContent","paddingHorizontal","textAlign","fontFamily","Platform","OS","color","fontSize"],"mappings":"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","sourcesContent":["// Main Program\n\nimport React from 'react';\nimport {\n  ActivityIndicator,\n  ImageBackground,\n  KeyboardAvoidingView,\n  Platform,\n  StyleSheet,\n  Text,\n  View,\n  StatusBar,\n} from 'react-native';\n\nimport { fetchLocationId, fetchWeather } from './utils/api';\nimport getImageForWeather from './utils/getImageForWeather';\nimport SearchInput from './components/SearchInput';\n\nexport default class App extends React.Component {\n  state = {\n    loading: false,\n    error: false,\n    location: '',\n    temperature: 0,\n    weather: '',\n  };\n\n  componentDidMount() {\n    this.handleUpdateLocation('San Francisco');\n  }\n\n  handleUpdateLocation = async city => {\n    if (!city) return;\n\n    this.setState({ loading: true }, async () => {\n      try {\n        const locationId = await fetchLocationId(city);\n        const { location, weather, temperature } = await fetchWeather(\n          locationId,\n        );\n\n        this.setState({\n          loading: false,\n          error: false,\n          location,\n          weather,\n          temperature,\n        });\n      } catch (e) {\n        this.setState({\n          loading: false,\n          error: true,\n        });\n      }\n    });\n  };\n\n  render() {\n    const { loading, error, location, weather, temperature } = this.state;\n\n    return (\n      <KeyboardAvoidingView style={styles.container} behavior=\"margin\">\n        <StatusBar barStyle=\"light-content\" />\n        <ImageBackground\n          source={getImageForWeather(weather)}\n          style={styles.imageContainer}\n          imageStyle={styles.image}\n        >\n          <View style={styles.detailsContainer}>\n            <ActivityIndicator animating={loading} color=\"white\" size=\"large\" />\n\n            {!loading && (\n              <View>\n                {error && (\n                  <Text style={[styles.smallText, styles.textStyle]}>\n                    Could not load weather, please try a different city.\n                  </Text>\n                )}\n\n                {!error && (\n                  <View>\n                    <Text style={[styles.largeText, styles.textStyle]}>\n                      {location}\n                    </Text>\n                    <Text style={[styles.smallText, styles.textStyle]}>\n                      {weather}\n                    </Text>\n                    <Text style={[styles.largeText, styles.textStyle]}>\n                      {`${Math.round(temperature)}°`}\n                    </Text>\n                  </View>\n                )}\n\n                <SearchInput\n                  placeholder=\"Search any city\"\n                  onSubmit={this.handleUpdateLocation}\n                />\n              </View>\n            )}\n          </View>\n        </ImageBackground>\n      </KeyboardAvoidingView>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#34495E',\n  },\n  imageContainer: {\n    flex: 1,\n  },\n  image: {\n    flex: 1,\n    width: null,\n    height: null,\n    resizeMode: 'cover',\n  },\n  detailsContainer: {\n    flex: 1,\n    justifyContent: 'center',\n    backgroundColor: 'rgba(0,0,0,0.2)',\n    paddingHorizontal: 20,\n  },\n  textStyle: {\n    textAlign: 'center',\n    fontFamily: Platform.OS === 'ios' ? 'AvenirNext-Regular' : 'Roboto',\n    color: 'white',\n  },\n  largeText: {\n    fontSize: 44,\n  },\n  smallText: {\n    fontSize: 18,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}